import logging
import psycopg2
import datetime
import os
import config
from aiogram import Bot
from aiogram import executor
from config import Token, admins
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import aiogram.utils.markdown as fmt

DATABASE_URL = os.environ['DATABASE_URL']

con = psycopg2.connect(DATABASE_URL, sslmode='require')
cur = con.cursor()

bot = Bot(token=Token)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

cur.execute(f'''CREATE TABLE IF NOT EXISTS events
                                 (Id Text,
                                 Name TEXT,
                                 Text TEXT,
                                 ImgName TEXT, 
                                 Price INT);''')
con.commit()
cur.execute(f'''CREATE TABLE IF NOT EXISTS claims
                                 (Id TEXT,
                                 ChatId TEXT,
                                 Name TEXT,
                                 Date TEXT,
                                 State TEXT,
                                 NameUser TEXT, 
                                 Price INT);''')
con.commit()

claim_a = {}


class SendMessage(StatesGroup):
    waiting_for_message_text = State()


class NewEvent(StatesGroup):
    name_event = State()
    text_event = State()
    price_event = State()


class EditEvent(StatesGroup):
    edit_name_event = State()
    edit_text_event = State()
    edit_price_event = State()

# cur.execute(f'''CREATE TABLE IF NOT EXISTS p{message.chat.id}
#                              (id TEXT,
#                              Name TEXT,
#                              Number TEXT);''')
# con.commit()
# cur.execute("DELETE FROM p1647407069")
# cur.execute("SELECT * FROM p1647407069")
# rows = cur.fetchall()
# print(len(rows))
# for i in range(len(rows)):
#     await message.answer(rows[i][0])

@dp.message_handler(commands='start')
async def start(message: types.Message):
    if message.chat.id in admins:
        buttons = [
            types.InlineKeyboardButton(text="–ü—Ä–æ–≥—É–ª–∫–∏", callback_data="ClbEvents-A"),
            types.InlineKeyboardButton(text="–í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="ClbClaims-A"),
            types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="ClbEditText-A"),
            types.InlineKeyboardButton(text="–ë–æ—Ç", callback_data="ClbBot-A")
        ]
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(*buttons)
        await message.answer('–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ –∫–Ω–æ–ø–∫–µ "–ë–æ—Ç" –º–æ–∂–Ω–æ –∑–∞–π—Ç–∏ –≤ –±–æ—Ç–∞, –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å...', reply_markup=keyboard)
    else:
        cur.execute(f'''CREATE TABLE IF NOT EXISTS p{message.chat.id}
                                                     (Name TEXT,
                                                     Date TEXT,
                                                     State TEXT,
                                                     NameUser TEXT, 
                                                     Price INT, 
                                                     AnswerAdmin TEXT);''')
        con.commit()
        cur.execute("SELECT * FROM events")
        rows = cur.fetchall()
        EventsNames = ''
        for i in range(len(rows)):
            EventsNames += f'{rows[i][1]}\n'
        buttons = [
            types.InlineKeyboardButton(text="–ü—Ä–æ–≥—É–ª–∫–∏", callback_data="ClbEvents"),
            types.InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="ClbHelp"),
            types.InlineKeyboardButton(text="–ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="ClbClaims")
        ]
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(*buttons)
        await message.answer(f'üëãüèª <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø GAGRASUPbot.</b>'
                             f'\n\n–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—à–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—é –æ—â—É—Ç–∏—Ç—å —Å–µ–±—è —Å–∞–∫—É—Ä–æ–π –Ω–∞ —Å–∞–ø–∞—Ö!'
                             f'\n\nStand Up Paddle - —Ç–∞–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–≤—É—á–∏—Ç –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥. –ò—Å—Ç–æ—Ä–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–∞–ø–æ–≤. –û–Ω –ø–æ–¥–æ–π–¥—ë—Ç –∫–∞–∫ –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤ —Ç–∞–∫ –∏ –¥–ª—è –¥–µ—Ç–µ–π, –¥–∞–∂–µ –¥–ª—è —Å–∞–º—ã—Ö —é–Ω—ã—Ö —Å–µ—Ä—Ñ–µ—Ä–æ–≤, –≤–µ–¥—å –ø–ª–∞–≤–∞—Ç—å –Ω–∞ –Ω–µ–º —Å–æ–≤—Å–µ–º –Ω–µ —Å–ª–æ–∂–Ω–æ'
                             f'\n\n–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –ø–æ–∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –ª—É—á—à–∏—Ö —Å–∞–ø–∞—Ö Bombitto, Stormline –∏ –¥—Ä.'
                             f'\n\n–î–∞–Ω–Ω—ã–π –≤–∏–¥ –±–µ–∑–æ–ø–∞—Å–µ–Ω. –ú—ã –≤–∞–º –≤—ã–¥–∞—ë–º –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—ã–µ —á–µ—Ö–ª—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤, —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–µ –∂–∏–ª–µ—Ç—ã ü¶∫.'
                             f'\n\n–ù–∞ —Å–∞–ø–µ –º–æ–∂–Ω–æ —É–º–µ—Å—Ç–∏—Ç—å –≥—Ä—É–∑, –≤–µ–¥—å –¥–ª—è —ç—Ç–æ–≥–æ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞—Ä–º–∞—à–µ–∫.'
                             f'\n\n–ù–∞—à–∏ —É—Å–ª—É–≥–∏:\n{EventsNames}'
                             f'\n–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç—É—Ä—ã –Ω–∞ —Å–∞–ø–∞—Ö –Ω–∞ –†–∏—Ü—É, –∫–∞–Ω—å–æ–Ω –•–∞—à—É–ø—Å–µ, —Ä–µ–∫—É –ú—á–∏—à—Ç–∞, –ë–µ–ª—ã–µ —Å–∫–∞–ª—ã'
                             f'\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å —Å –ø—Ä–æ–≥—É–ª–∫–æ–π –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ –∫–∞–∂–¥—É—é –ø—Ä–æ–≥—É–ª–∫—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ¬´–ü–†–û–ì–£–õ–ö–ò¬ª',
                             parse_mode=types.ParseMode.HTML, reply_markup=keyboard)



@dp.callback_query_handler(text="ClbStart")
async def clb_start(call: types.CallbackQuery):
    if call.message.chat.id in admins:
        buttons = [
            types.InlineKeyboardButton(text="–ü—Ä–æ–≥—É–ª–∫–∏", callback_data="ClbEvents-A"),
            types.InlineKeyboardButton(text="–í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="ClbClaims-A"),
            types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="ClbEditText-A"),
            types.InlineKeyboardButton(text="–ë–æ—Ç", callback_data="ClbBot-A")
        ]
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(*buttons)
        await call.message.edit_text('–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ –∫–Ω–æ–ø–∫–µ "–ë–æ—Ç" –º–æ–∂–Ω–æ –∑–∞–π—Ç–∏ –≤ –±–æ—Ç–∞, –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å...', reply_markup=keyboard)
    else:
        cur.execute("SELECT * FROM events")
        rows = cur.fetchall()
        EventsNames = ''
        for i in range(len(rows)):
            EventsNames += f'{rows[i][1]}\n'
        buttons = [
            types.InlineKeyboardButton(text="–ü—Ä–æ–≥—É–ª–∫–∏", callback_data="ClbEvents"),
            types.InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="ClbHelp"),
            types.InlineKeyboardButton(text="–ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="ClbClaims")
        ]
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(*buttons)
        await call.message.edit_text(f'üëãüèª <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø GAGRASUPbot.</b>'
                                     f'\n\n–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—à–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—é –æ—â—É—Ç–∏—Ç—å —Å–µ–±—è —Å–∞–∫—É—Ä–æ–π –Ω–∞ —Å–∞–ø–∞—Ö!'
                                     f'\n\nStand Up Paddle - —Ç–∞–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–≤—É—á–∏—Ç –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥. –ò—Å—Ç–æ—Ä–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–∞–ø–æ–≤. –û–Ω –ø–æ–¥–æ–π–¥—ë—Ç –∫–∞–∫ –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤ —Ç–∞–∫ –∏ –¥–ª—è –¥–µ—Ç–µ–π, –¥–∞–∂–µ –¥–ª—è —Å–∞–º—ã—Ö —é–Ω—ã—Ö —Å–µ—Ä—Ñ–µ—Ä–æ–≤, –≤–µ–¥—å –ø–ª–∞–≤–∞—Ç—å –Ω–∞ –Ω–µ–º —Å–æ–≤—Å–µ–º –Ω–µ —Å–ª–æ–∂–Ω–æ'
                                     f'\n\n–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –ø–æ–∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –ª—É—á—à–∏—Ö —Å–∞–ø–∞—Ö Bombitto, Stormline –∏ –¥—Ä.'
                                     f'\n\n–î–∞–Ω–Ω—ã–π –≤–∏–¥ –±–µ–∑–æ–ø–∞—Å–µ–Ω. –ú—ã –≤–∞–º –≤—ã–¥–∞—ë–º –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—ã–µ —á–µ—Ö–ª—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤, —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–µ –∂–∏–ª–µ—Ç—ã ü¶∫.'
                                     f'\n\n–ù–∞ —Å–∞–ø–µ –º–æ–∂–Ω–æ —É–º–µ—Å—Ç–∏—Ç—å –≥—Ä—É–∑, –≤–µ–¥—å –¥–ª—è —ç—Ç–æ–≥–æ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞—Ä–º–∞—à–µ–∫.'
                                     f'\n\n–ù–∞—à–∏ —É—Å–ª—É–≥–∏:\n{EventsNames}'
                                     f'\n–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç—É—Ä—ã –Ω–∞ —Å–∞–ø–∞—Ö –Ω–∞ –†–∏—Ü—É, –∫–∞–Ω—å–æ–Ω –•–∞—à—É–ø—Å–µ, —Ä–µ–∫—É –ú—á–∏—à—Ç–∞, –ë–µ–ª—ã–µ —Å–∫–∞–ª—ã'
                                     f'\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å —Å –ø—Ä–æ–≥—É–ª–∫–æ–π –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ –∫–∞–∂–¥—É—é –ø—Ä–æ–≥—É–ª–∫—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ¬´–ü–†–û–ì–£–õ–ö–ò¬ª',
                                     parse_mode=types.ParseMode.HTML, reply_markup=keyboard)


@dp.callback_query_handler(text="ClbEvents")
async def clb_events(call: types.CallbackQuery):
    cur.execute("SELECT * FROM events")
    rows = cur.fetchall()
    buttons = [types.InlineKeyboardButton(text=f"{rows[i][1]}", callback_data=f"ClbEvents{rows[i][0]}") for i in
               range(len(rows))]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    keyboard.add(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"ClbStart"))
    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏:', reply_markup=keyboard)

    for i in range(len(rows)):
        @dp.callback_query_handler(text=f"ClbEvents{rows[i][0]}")
        async def clb_events_events(call: types.CallbackQuery):
            key = types.InlineKeyboardMarkup(row_width=1)
            key.add(types.InlineKeyboardButton(text=f"–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"ClbEventsSend"),
                    types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"ClbEvents"))
            await call.message.edit_text(f'<b>{rows[i][1]}</b>'
                                         f'\n\n{rows[i][2]}'
                                         f'\n\n–¶–µ–Ω–∞: {rows[i][4]}', parse_mode=types.ParseMode.HTML, reply_markup=key)

        @dp.callback_query_handler(text=f"ClbEventsSend")
        async def clb_events_send(call: types.CallbackQuery):
            date = datetime.datetime.now()
            user_name = call.message.chat.username
            cur.execute(f'''INSERT INTO p{call.message.chat.id} (Name, Date, State, NameUser, Price, AnswerAdmin) VALUES 
                                                   ('{rows[i][1]}', 
                                                   '{date}', 
                                                   '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏', 
                                                   '{user_name}', 
                                                   '{rows[i][4]}',
                                                   ' ');''')
            con.commit()
            cur.execute(f"SELECT * FROM p{call.message.chat.id}")
            rowssss = cur.fetchall()
            claim_id = f'{call.message.chat.id}_{len(rowssss)}'
            cur.execute(f'''INSERT INTO claims (Id, ChatId, Name, Date, State, NameUser, Price) VALUES 
                                                               ('{claim_id}',
                                                               '{call.message.chat.id}',
                                                               '{rows[i][1]}', 
                                                               '{date}', 
                                                               '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏', 
                                                               '{user_name}', 
                                                               '{rows[i][4]}');''')
            con.commit()
            key = types.InlineKeyboardMarkup(row_width=1)
            key.add(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"ClbStart"))
            keya = types.InlineKeyboardMarkup(row_width=1)
            keya.add(types.InlineKeyboardButton(text=f"–ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"ClbSendMessage"))
            await call.message.edit_text(
                '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!', reply_markup=key)
            claim_a['admin_claim_id'] = claim_id
            claim_a['admin_chat_id'] = call.message.chat.id
            claim_a['admin_chat_date'] = date
            for o in admins:
                await bot.send_message(int(o), f'–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!!!'
                                               f'\n\n–ü—Ä–æ–≥—É–ª–∫–∞: {rows[i][1]}'
                                               f'\n–î–∞—Ç–∞: {date}'
                                               f'\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}'
                                               f'\n–¶–µ–Ω–∞: {rows[i][4]}', reply_markup=keya)


@dp.callback_query_handler(text="ClbHelp")
async def clb_help(call: types.CallbackQuery):
    key = types.InlineKeyboardMarkup(row_width=1)
    key.add(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"ClbStart"))
    await call.message.edit_text('–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–º–æ—â—å!', reply_markup=key)


@dp.callback_query_handler(text="ClbClaims")
async def clb_help(call: types.CallbackQuery):
    cur.execute(f"SELECT * FROM p{call.message.chat.id}")
    rows = cur.fetchall()
    buttons = [types.InlineKeyboardButton(text=f"{rows[i][0]} ({'.'.join(rows[i][1].split()[0].split('-')[::-1])})", callback_data=f"ClbEvents{rows[i][1]}") for i in
               range(len(rows))]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    keyboard.add(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"ClbStart"))
    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏:', reply_markup=keyboard)
    for i in range(len(rows)):
        @dp.callback_query_handler(text=f"ClbEvents{rows[i][1]}")
        async def clb_events_events(call: types.CallbackQuery):
            key = types.InlineKeyboardMarkup(row_width=1)
            key.add(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"ClbClaims"))
            await call.message.edit_text(f'<b>{rows[i][0]}</b>'
                                         f'\n–î–∞—Ç–∞: {".".join(rows[i][1].split()[0].split("-")[::-1])}'
                                         f'\n–í—Ä–µ–º—è: {":".join(rows[i][1].split()[1].split(":")[0:2])}'
                                         f'\n\n–°—Ç–∞—Ç—É—Å: {rows[i][2]}'
                                         f'\n–¶–µ–Ω–∞: {rows[i][4]}'
                                         f'\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {rows[i][5]}', parse_mode=types.ParseMode.HTML, reply_markup=key)


@dp.callback_query_handler(text="ClbSendMessage")
async def clb_send_message(call: types.CallbackQuery):
    await SendMessage.waiting_for_message_text.set()
    await call.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')

@dp.message_handler(state=SendMessage.waiting_for_message_text)
async def send_message(message: types.Message, state: FSMContext):
    text = message.text
    cur.execute(f'''SELECT ChatId FROM claims WHERE Id = '{claim_a['admin_claim_id']}';''')
    rows = cur.fetchone()
    await dp.bot.send_message(int(rows[0]), text)
    cur.execute(f'''UPDATE p{claim_a['admin_chat_id']} SET AnswerAdmin = '{text}' WHERE Date = '{claim_a['admin_chat_date']}';''')
    con.commit()
    await state.finish()


# ADMINISTRATION
@dp.callback_query_handler(text="ClbEvents-A")
async def events_adm(call: types.CallbackQuery):
    cur.execute("SELECT * FROM events")
    rows = cur.fetchall()
    buttons = [types.InlineKeyboardButton(text=f"{rows[i][1]}", callback_data=f"ClbEvents{rows[i][0]}-A") for i in
               range(len(rows))]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    keyboard.add(types.InlineKeyboardButton(text=f"–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data=f"ClbNewEvent-A"),
                 types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"ClbStart"))
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏:'
    if buttons == []:
        text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç!'
    await call.message.edit_text(text, reply_markup=keyboard)

    for i in range(len(rows)):
        @dp.callback_query_handler(text=f"ClbEvents{rows[i][0]}-A")
        async def clb_events_events_adm(call: types.CallbackQuery):
            key = types.InlineKeyboardMarkup(row_width=1)
            key.add(types.InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å", callback_data=f"ClbDelEvent{rows[i][0]}"),
                    types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"ClbEvents-A"))
            await call.message.edit_text(f'<b>{rows[i][1]}</b>'
                                         f'\n\n{rows[i][2]}'
                                         f'\n\n–¶–µ–Ω–∞: {rows[i][4]}', parse_mode=types.ParseMode.HTML, reply_markup=key)


            @dp.callback_query_handler(text=f"ClbDelEvent{rows[i][0]}")
            async def clb_del_event_adm(call: types.CallbackQuery):
                cur.execute(f'''DELETE FROM events WHERE Id = '{rows[i][0]}';''')
                con.commit()
                key = types.InlineKeyboardMarkup(row_width=1)
                key.add(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"ClbEvents-A"))
                await call.message.edit_text('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!', reply_markup=key)

@dp.callback_query_handler(text=f"ClbNewEvent-A")
async def clb_new_event_1_adm(call: types.CallbackQuery):
    await call.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è...')
    await NewEvent.name_event.set()

@dp.message_handler(state=NewEvent.name_event)
async def clb_new_event_2_adm(message: types.Message, state: FSMContext):
    await state.update_data(name_event=message.text.lower())
    await NewEvent.next()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è...')

@dp.message_handler(state=NewEvent.text_event)
async def clb_new_event_3_adm(message: types.Message, state: FSMContext):
    await state.update_data(text_event=message.text.lower())
    await NewEvent.next()
    await message.answer('–ö–∞–∫–∞—è —Ü–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ? (–ö–æ–ª-–≤–æ: 1 —à—Ç)')

@dp.message_handler(state=NewEvent.price_event)
async def clb_new_event_4_adm(message: types.Message, state: FSMContext):
    await state.update_data(price_event=message.text.lower())
    user_data = await state.get_data()
    cur.execute(f'''INSERT INTO events (Id, Name, Text, ImgName, Price) VALUES 
                                                        ('{datetime.datetime.now()}',
                                                        '{user_data["name_event"]}',
                                                        '{user_data["text_event"]}',
                                                        ' ',
                                                        '{user_data["price_event"]}');''')
    con.commit()
    key = types.InlineKeyboardMarkup(row_width=1)
    key.add(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"ClbEvents-A"))
    await message.answer(f'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!!!'
                            f'\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {user_data["name_event"]}'
                            f'\n–û–ø–∏—Å–∞–Ω–∏–µ: {user_data["text_event"]}'
                            f'\n–¶–µ–Ω–∞: {user_data["price_event"]}', reply_markup=key)
    await state.finish()



@dp.callback_query_handler(text=f"ClbClaims-A")
async def clb_claims_adm(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(text=f"–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", callback_data=f"ClbClaimsTrue-A"),
                 types.InlineKeyboardButton(text=f"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", callback_data=f"ClbClaimsFalse-A"),
                 types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"ClbStart"))
    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–æ–∫:', reply_markup=keyboard)

@dp.callback_query_handler(text=f"ClbClaimsTrue-A")
async def clb_claims_true_adm(call: types.CallbackQuery):
    cur.execute("SELECT * FROM claims")
    rows = cur.fetchall()
    buttons = [types.InlineKeyboardButton(text=f"{rows[i][2]} ({'.'.join(rows[i][3].split()[0].split('-')[::-1])})", callback_data=f"ClbClaimTrue{rows[i][0]}-A") for i in
               range(len(rows)) if rows[i][4] == '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏']
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    keyboard.add(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"ClbClaims-A"))
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏:'
    if buttons == []:
        text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç!'
    await call.message.edit_text(text, reply_markup=keyboard)
    for i in range(len(rows)):
        @dp.callback_query_handler(text=f"ClbClaimTrue{rows[i][0]}-A")
        async def clb_claims_true_adm_1(call: types.CallbackQuery):
            keyb = types.InlineKeyboardMarkup(row_width=1)
            keyb.add(types.InlineKeyboardButton(text=f"–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å - –í—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f"ClbClaimTrue{rows[i][0]}-True-A"),
                     types.InlineKeyboardButton(text=f"–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –∑–∞—è–≤–∫–µ", callback_data=f"ClbSendMessage"),
                     types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"ClbClaimsTrue-A"))
            claim_a['admin_claim_id'] = rows[i][0]
            cur.execute(f"SELECT * FROM p{rows[i][1]} WHERE Date = '{rows[i][3]}'")
            r = cur.fetchall()
            print(r)
            await call.message.edit_text(f'ChatId - {rows[i][1]}'
                                         f'\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {rows[i][2]}'
                                         f'\n–î–∞—Ç–∞: {".".join(rows[i][3].split()[0].split("-")[::-1])} –≤ {":".join(rows[i][3].split()[1].split(":")[0:2])}'
                                         f'\n–°—Ç–∞—Ç—É—Å: {rows[i][4]}'
                                         f'\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{rows[i][5]}'
                                         f'\n\n–¶–µ–Ω–∞: {rows[i][6]}'
                                         f'\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {r[0][5]}', reply_markup=keyb)

        @dp.callback_query_handler(text=f"ClbClaimTrue{rows[i][0]}-True-A")
        async def clb_claims_true_adm_2(call: types.CallbackQuery):
            cur.execute(f'''UPDATE claims SET State = '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' WHERE Id = '{rows[i][0]}';''')
            con.commit()
            cur.execute(f'''UPDATE p{rows[i][1]} SET State = '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' WHERE Date = '{rows[i][3]}';''')
            con.commit()
            keyb = types.InlineKeyboardMarkup(row_width=1)
            keyb.add(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"ClbClaimsTrue-A"))
            await call.message.edit_text(f'–£—Å–ø–µ—à–Ω–æ!', reply_markup=keyb)

@dp.callback_query_handler(text=f"ClbClaimsFalse-A")
async def clb_claims_false_adm(call: types.CallbackQuery):
    cur.execute("SELECT * FROM claims")
    rows = cur.fetchall()
    buttons = [types.InlineKeyboardButton(text=f"{rows[i][2]} ({rows[i][3].split()[0]})", callback_data=f"ClbClaimFalse{rows[i][0]}-A") for i in
               range(len(rows)) if rows[i][4] == '–í—ã–ø–æ–ª–Ω–µ–Ω–∞']
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    keyboard.add(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"ClbClaims-A"))
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏:'
    if buttons == []:
        text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç!'
    await call.message.edit_text(text, reply_markup=keyboard)
    for i in range(len(rows)):
        @dp.callback_query_handler(text=f"ClbClaimFalse{rows[i][0]}-A")
        async def clb_claims_false_adm_1(call: types.CallbackQuery):
            keyb = types.InlineKeyboardMarkup(row_width=1)
            keyb.add(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"ClbClaimsFalse-A"))
            await call.message.edit_text(f'ChatId - {rows[i][1]}'
                                         f'\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {rows[i][2]}'
                                         f'\n–î–∞—Ç–∞: {rows[i][3]}'
                                         f'\n–°—Ç–∞—Ç—É—Å: {rows[i][4]}'
                                         f'\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {rows[i][5]}'
                                         f'\n\n–¶–µ–Ω–∞: {rows[i][6]}', reply_markup=keyb)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)